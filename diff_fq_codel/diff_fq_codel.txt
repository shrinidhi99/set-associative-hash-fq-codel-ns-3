diff --git a/src/test/ns3tc/fq-codel-queue-disc-test-suite.cc b/src/test/ns3tc/fq-codel-queue-disc-test-suite.cc
index ad76568b7..90f54b7fc 100644
--- a/src/test/ns3tc/fq-codel-queue-disc-test-suite.cc
+++ b/src/test/ns3tc/fq-codel-queue-disc-test-suite.cc
@@ -35,7 +35,7 @@
 #include "ns3/pointer.h"
 
 using namespace ns3;
-
+int32_t hash;
 /**
  * Simple test packet filter able to classify IPv4 packets
  *
@@ -53,6 +53,7 @@ public:
 
 private:
   virtual int32_t DoClassify (Ptr<QueueDiscItem> item) const;
+  virtual bool CheckProtocol (Ptr<QueueDiscItem> item) const;
 };
 
 TypeId
@@ -77,7 +78,13 @@ Ipv4TestPacketFilter::~Ipv4TestPacketFilter ()
 int32_t
 Ipv4TestPacketFilter::DoClassify (Ptr<QueueDiscItem> item) const
 {
-  return 0;
+  return hash;
+}
+
+bool
+Ipv4TestPacketFilter::CheckProtocol (Ptr<QueueDiscItem> item) const
+{
+  return true;
 }
 
 /**
@@ -109,7 +116,7 @@ FqCoDelQueueDiscNoSuitableFilter::DoRun (void)
   Ptr<FqCoDelQueueDisc> queueDisc = CreateObjectWithAttributes<FqCoDelQueueDisc> ("MaxSize", StringValue ("4p"));
   Ptr<Ipv4TestPacketFilter> filter = CreateObject<Ipv4TestPacketFilter> ();
   queueDisc->AddPacketFilter (filter);
-
+  hash = -1;
   queueDisc->SetQuantum (1500);
   queueDisc->Initialize ();
 
@@ -513,6 +520,172 @@ FqCoDelQueueDiscUDPFlowsSeparation::DoRun (void)
   Simulator::Destroy ();
 }
 
+/**
+ * This class tests Linear probing capability, collision response, and set creation capability of SetAssociative Hashing in fqCodel
+ * SetAssociative hash.We modified DoClassify and CheckProtocol so that we could control the hash returned for each packet
+ * We use flow hashes ranging from 0 to 7. These must go into different queues in the same set. The set number is obtained by m_flowsIndices[0] which is 0.
+ * When a new packet comes in with flow 1024. Since 1024 % 1024 = 0, m_flowsIndices[0] = 0 is obtained, and the first set is iteratively searched. 
+ * The packet is added to queue 0 since the tag of the queues in the set don't match with the hash of the flow and the tag of the queue is updated.
+ * A packet with hash 1025 arrives. Since 1025 % 1024 = 1, m_flowsIndices[0] = 0 is obtained, and the first set is iteratively searched. There is no match. Therefore
+ * it is added to  queue 0 and the tag is updated.
+ * When a flow hash of 20 arrives, the outerHash corresponding to 20 is 16, and m_flowIndices[16] wasnâ€™t previously allotted, a new set of eight queues are created, 
+ * and m_flowsIndices[16] is set to be 8 (since there are queues 0-7 previously set). After creating eight queues 8-15, 
+ * insert the packet into the first queue in this set.
+ */
+class FqCoDelQueueDiscSetLinearProbing : public TestCase
+{
+public:
+  FqCoDelQueueDiscSetLinearProbing ();
+  virtual ~FqCoDelQueueDiscSetLinearProbing ();
+private:
+  virtual void DoRun (void);
+  void AddPacket (Ptr<FqCoDelQueueDisc> queue, Ipv4Header hdr);
+};
+
+FqCoDelQueueDiscSetLinearProbing::FqCoDelQueueDiscSetLinearProbing ()
+    : TestCase ("Test credits and flows status")
+{
+}
+
+FqCoDelQueueDiscSetLinearProbing::~FqCoDelQueueDiscSetLinearProbing ()
+{
+}
+
+void
+FqCoDelQueueDiscSetLinearProbing::AddPacket (Ptr<FqCoDelQueueDisc> queue, Ipv4Header hdr)
+{
+  Ptr<Packet> p = Create<Packet> (100);
+  Address dest;
+  Ptr<Ipv4QueueDiscItem> item = Create<Ipv4QueueDiscItem> (p, dest, 0, hdr);
+  queue->Enqueue (item);
+}
+
+
+
+void
+FqCoDelQueueDiscSetLinearProbing::DoRun (void)
+{
+  Ptr<FqCoDelQueueDisc> queueDisc = CreateObjectWithAttributes<FqCoDelQueueDisc> ("SetAssociativity", BooleanValue (true));
+  queueDisc->SetQuantum (90);
+  queueDisc->Initialize ();
+  Ptr<Ipv4TestPacketFilter> filter = CreateObject<Ipv4TestPacketFilter> ();
+  queueDisc->AddPacketFilter (filter);
+  Ipv4Header hdr;
+  hdr.SetPayloadSize (100);
+  hdr.SetSource (Ipv4Address ("10.10.1.1"));
+  hdr.SetDestination (Ipv4Address ("10.10.1.2"));
+  hdr.SetProtocol (7);
+  hash = 0;
+  AddPacket (queueDisc, hdr);
+  hash = 1;
+  AddPacket (queueDisc, hdr);
+  AddPacket (queueDisc, hdr);
+  hash = 2;
+  AddPacket (queueDisc, hdr);
+  hash = 3;
+  AddPacket (queueDisc, hdr);
+  hash = 4;
+  AddPacket (queueDisc, hdr);
+  hash = 4;
+  AddPacket (queueDisc, hdr);
+  hash = 5;
+  AddPacket (queueDisc, hdr);
+  hash = 6;
+  AddPacket (queueDisc, hdr);
+  hash = 7;
+  AddPacket (queueDisc, hdr);
+  hash = 1024;
+  AddPacket (queueDisc, hdr);
+  NS_TEST_ASSERT_MSG_EQ (queueDisc->QueueDisc::GetNPackets (), 11,
+                         "unexpected number of packets in the queue disc");
+  NS_TEST_ASSERT_MSG_EQ (queueDisc->GetQueueDiscClass (0)->GetQueueDisc ()->GetNPackets (), 2,
+                         "unexpected number of packets in the first flow queue of set one");
+  NS_TEST_ASSERT_MSG_EQ (queueDisc->GetQueueDiscClass (1)->GetQueueDisc ()->GetNPackets (), 2,
+                         "unexpected number of packets in the second flow queue of set one");
+  NS_TEST_ASSERT_MSG_EQ (queueDisc->GetQueueDiscClass (2)->GetQueueDisc ()->GetNPackets (), 1,
+                         "unexpected number of packets in the third flow queue of set one");
+  NS_TEST_ASSERT_MSG_EQ (queueDisc->GetQueueDiscClass (3)->GetQueueDisc ()->GetNPackets (), 1,
+                         "unexpected number of packets in the fourth flow queue of set one");
+  NS_TEST_ASSERT_MSG_EQ (queueDisc->GetQueueDiscClass (4)->GetQueueDisc ()->GetNPackets (), 2,
+                         "unexpected number of packets in the fifth flow queue of set one");
+  NS_TEST_ASSERT_MSG_EQ (queueDisc->GetQueueDiscClass (5)->GetQueueDisc ()->GetNPackets (), 1,
+                         "unexpected number of packets in the sixth flow queue of set one");
+  NS_TEST_ASSERT_MSG_EQ (queueDisc->GetQueueDiscClass (6)->GetQueueDisc ()->GetNPackets (), 1,
+                         "unexpected number of packets in the seventh flow queue of set one");
+  NS_TEST_ASSERT_MSG_EQ (queueDisc->GetQueueDiscClass (7)->GetQueueDisc ()->GetNPackets (), 1,
+                         "unexpected number of packets in the eigth flow queue of set one");
+  hash = 1025;
+  AddPacket (queueDisc, hdr);
+  NS_TEST_ASSERT_MSG_EQ (queueDisc->GetQueueDiscClass (0)->GetQueueDisc ()->GetNPackets (), 3,
+                         "unexpected number of packets in the first flow of set one");
+  hash = 10;
+  AddPacket (queueDisc, hdr);
+  NS_TEST_ASSERT_MSG_EQ (queueDisc->GetQueueDiscClass (8)->GetQueueDisc ()->GetNPackets (), 1,
+                         "unexpected number of packets in the first flow of set two");
+  Simulator::Destroy ();
+}
+
+class FqCoDelQueueDiscCollision : public TestCase
+{
+public:
+  FqCoDelQueueDiscCollision ();
+  virtual ~FqCoDelQueueDiscCollision ();
+
+private:
+  virtual void DoRun (void);
+  void AddPacket (Ptr<FqCoDelQueueDisc> queue, Ipv4Header hdr);
+};
+
+FqCoDelQueueDiscCollision::FqCoDelQueueDiscCollision ()
+    : TestCase ("Test credits and flows status")
+{
+}
+
+FqCoDelQueueDiscCollision::~FqCoDelQueueDiscCollision ()
+{
+}
+
+void
+FqCoDelQueueDiscCollision::AddPacket (Ptr<FqCoDelQueueDisc> queue, Ipv4Header hdr)
+{
+  Ptr<Packet> p = Create<Packet> (100);
+  Address dest;
+  Ptr<Ipv4QueueDiscItem> item = Create<Ipv4QueueDiscItem> (p, dest, 0, hdr);
+  queue->Enqueue (item);
+}
+
+void
+FqCoDelQueueDiscCollision::DoRun (void)
+{
+  Ptr<FqCoDelQueueDisc> queueDisc = CreateObjectWithAttributes<FqCoDelQueueDisc> ("SetAssociativity", BooleanValue (false));
+  queueDisc->SetQuantum (90);
+  queueDisc->Initialize ();
+  Ptr<Ipv4TestPacketFilter> filter = CreateObject<Ipv4TestPacketFilter> ();
+  queueDisc->AddPacketFilter (filter);
+  Ipv4Header hdr;
+  hdr.SetPayloadSize (100);
+  hdr.SetSource (Ipv4Address ("10.10.1.1"));
+  hdr.SetDestination (Ipv4Address ("10.10.1.2"));
+  hdr.SetProtocol (7);
+  int i = 0;
+  std::ifstream in("hv_9.txt");
+    if(!in) {
+      std::cout << "Cannot open input file.\n";
+    }
+  while(1){
+    char str[255];
+    in.getline(str, 255);
+    unsigned int ui = static_cast<unsigned int>(std::stoul(std::string{str}));
+    hash = ui;
+    if(i >= 4000){
+    	AddPacket (queueDisc, hdr);
+    }
+    i++;
+  }
+  in.close();
+  Simulator::Destroy ();
+}
+
 class FqCoDelQueueDiscTestSuite : public TestSuite
 {
 public:
@@ -527,6 +700,8 @@ FqCoDelQueueDiscTestSuite::FqCoDelQueueDiscTestSuite ()
   AddTestCase (new FqCoDelQueueDiscDeficit, TestCase::QUICK);
   AddTestCase (new FqCoDelQueueDiscTCPFlowsSeparation, TestCase::QUICK);
   AddTestCase (new FqCoDelQueueDiscUDPFlowsSeparation, TestCase::QUICK);
+  AddTestCase (new FqCoDelQueueDiscSetLinearProbing, TestCase::QUICK);
+  // AddTestCase (new FqCoDelQueueDiscCollision, TestCase::QUICK);
 }
 
 static FqCoDelQueueDiscTestSuite fqCoDelQueueDiscTestSuite;
diff --git a/src/traffic-control/model/fq-codel-queue-disc.cc b/src/traffic-control/model/fq-codel-queue-disc.cc
index 3ea41b050..915a49d06 100644
--- a/src/traffic-control/model/fq-codel-queue-disc.cc
+++ b/src/traffic-control/model/fq-codel-queue-disc.cc
@@ -29,6 +29,7 @@
 namespace ns3 {
 
 NS_LOG_COMPONENT_DEFINE ("FqCoDelQueueDisc");
+uint32_t tags[1024];
 
 NS_OBJECT_ENSURE_REGISTERED (FqCoDelFlow);
 
@@ -129,6 +130,9 @@ TypeId FqCoDelQueueDisc::GetTypeId (void)
                    UintegerValue (0),
                    MakeUintegerAccessor (&FqCoDelQueueDisc::m_perturbation),
                    MakeUintegerChecker<uint32_t> ())
+     .AddAttribute (
+              "SetAssociativity", "Variable to use setassociativity hash", BooleanValue (false),
+              MakeBooleanAccessor (&FqCoDelQueueDisc::m_setAssociativity), MakeBooleanChecker ());
   ;
   return tid;
 }
@@ -162,7 +166,97 @@ bool
 FqCoDelQueueDisc::DoEnqueue (Ptr<QueueDiscItem> item)
 {
   NS_LOG_FUNCTION (this << item);
-
+  if (m_setAssociativity)
+    {
+      uint32_t h = 0;
+      uint32_t innerHash, outerHash;
+      uint32_t flowHash;
+      uint32_t set_ways = 8;
+      if (GetNPacketFilters () == 0)
+        {
+          flowHash = item->Hash (m_perturbation);
+          h = (flowHash % m_flows);
+          innerHash = h % set_ways;
+          outerHash = h - innerHash;
+        }
+      else
+        {
+          int32_t ret = Classify (item);
+          if (ret != PacketFilter::PF_NO_MATCH)
+            {
+              flowHash = ret;
+              h = ret % m_flows;
+              innerHash = h % set_ways;
+              outerHash = h - innerHash;
+            }
+          else
+            {
+              NS_LOG_ERROR ("No filter has been able to classify this packet, drop it.");
+              DropBeforeEnqueue (item, UNCLASSIFIED_DROP);
+              return false;
+            }
+        }
+      Ptr<FqCoDelFlow> flow;
+      if (m_flowsIndices.find (outerHash) == m_flowsIndices.end ())
+        {
+          for (uint32_t i = 0; i < 8; i++)
+            {
+              flow = m_flowFactory.Create<FqCoDelFlow> ();
+              Ptr<QueueDisc> qd = m_queueDiscFactory.Create<QueueDisc> ();
+              qd->Initialize ();
+              flow->SetQueueDisc (qd);
+              AddQueueDiscClass (flow);
+            }
+          m_flowsIndices[outerHash] = GetNQueueDiscClasses () - 8;
+          flow = StaticCast<FqCoDelFlow> (GetQueueDiscClass (m_flowsIndices[outerHash]));
+          flow->SetStatus (FqCoDelFlow::NEW_FLOW);
+          flow->SetDeficit (m_quantum);
+          m_newFlows.push_back (flow);
+          tags[outerHash] = flowHash;
+          flow->GetQueueDisc ()->Enqueue (item);
+          if (GetCurrentSize () > GetMaxSize ())
+            {
+              FqCoDelDrop ();
+            }
+        }
+      else
+        {
+          uint32_t i;
+          bool flag = false;
+          for (i = m_flowsIndices[outerHash]; i < m_flowsIndices[outerHash] + 8; i++)
+            {
+              flow = StaticCast<FqCoDelFlow> (GetQueueDiscClass (i));
+              if (tags[outerHash + i - m_flowsIndices[outerHash]] == flowHash ||
+                  flow->GetStatus () == FqCoDelFlow::INACTIVE)
+                {
+                  if (flow->GetStatus () == FqCoDelFlow::INACTIVE)
+                    {
+                      flow->SetStatus (FqCoDelFlow::NEW_FLOW);
+                      flow->SetDeficit (m_quantum);
+                      m_newFlows.push_back (flow);
+                    }
+                  flow->GetQueueDisc ()->Enqueue (item);
+                  tags[outerHash + i - m_flowsIndices[outerHash]] = flowHash;
+                  flag = true;
+                  if (GetCurrentSize () > GetMaxSize ())
+                    {
+                      FqCoDelDrop ();
+                    }
+                  break;
+                }
+            }
+          if (flag == false)
+            {
+              flow = StaticCast<FqCoDelFlow> (GetQueueDiscClass (m_flowsIndices[outerHash]));
+              flow->GetQueueDisc ()->Enqueue (item);
+              tags[outerHash] = flowHash;
+              if (GetCurrentSize () > GetMaxSize ())
+                {
+                  FqCoDelDrop ();
+                }
+            }
+        }
+    } else {
   uint32_t h = 0;
 
   if (GetNPacketFilters () == 0)
@@ -218,7 +312,9 @@ FqCoDelQueueDisc::DoEnqueue (Ptr<QueueDiscItem> item)
       FqCoDelDrop ();
     }
 
-  return true;
+  
+}
+return true;
 }
 
 Ptr<QueueDiscItem>
diff --git a/src/traffic-control/model/fq-codel-queue-disc.h b/src/traffic-control/model/fq-codel-queue-disc.h
index 0d7390f64..e4911c226 100644
--- a/src/traffic-control/model/fq-codel-queue-disc.h
+++ b/src/traffic-control/model/fq-codel-queue-disc.h
@@ -148,6 +148,7 @@ private:
   uint32_t m_flows;          //!< Number of flow queues
   uint32_t m_dropBatchSize;  //!< Max number of packets dropped from the fat flow
   uint32_t m_perturbation;   //!< hash perturbation value
+  bool m_setAssociativity;     //!< To enable set-associative hashing
 
   std::list<Ptr<FqCoDelFlow> > m_newFlows;    //!< The list of new flows
   std::list<Ptr<FqCoDelFlow> > m_oldFlows;    //!< The list of old flows
